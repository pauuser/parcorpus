version: '3.7'

volumes:
    postgres2:
    certs:
      driver: local
    esdata01:
      driver: local
    kibanadata:
      driver: local
    postgres1:

networks:
  backend-network:
    driver: "bridge"
  default:
    name: elastic
    external: false

services:
  postgres-1:
    container_name: postgres-1
    image: 'bitnami/postgresql:latest'
    environment:
      POSTGRES_DB: parcorpusdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRESQL_REPLICATION_MODE: master
      POSTGRESQL_REPLICATION_USER: postgres
      POSTGRESQL_REPLICATION_PASSWORD: postgres
      POSTGRESQL_USERNAME: postgres
      POSTGRESQL_PASSWORD: postgres
      POSTGRESQL_DATABASE: parcorpusdb
    volumes:
      - 'postgres1:/bitnami/postgresql'
      - './Parcorpus/scripts/roles.sql:/docker-entrypoint-initdb.d/roles.sql'
    ports:
      - "5434:5432"
    networks:
      - backend-network
  
  postgres-2:
    container_name: postgres-2
    image: 'bitnami/postgresql:latest'
    environment:
      POSTGRES_DB: parcorpusdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRESQL_REPLICATION_MODE: slave
      POSTGRESQL_REPLICATION_USER: postgres
      POSTGRESQL_REPLICATION_PASSWORD: postgres
      POSTGRESQL_MASTER_HOST: postgres-1
      POSTGRESQL_PASSWORD: postgres
      POSTGRESQL_MASTER_PORT_NUMBER: 5432
    volumes:
      - 'postgres2:/bitnami/postgresql'
      - './Parcorpus/scripts/roles.sql:/docker-entrypoint-initdb.d/roles.sql'
    ports:
      - "5436:5432"
    restart: unless-stopped
    networks:
      - backend-network
    depends_on:
      - postgres-1
  
  rabbitmq:
    image: rabbitmq:3.10.7-management
    hostname: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648
    volumes:
      - ./rabbitmq:/var/lib/rabbitmq
    ports:
      - 15672:15672
      - 5672:5672
    networks:
      - backend-network

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1

  kibana:
    depends_on:
      - es01
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - ELASTICSEARCH_HOSTS=http://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
    mem_limit: ${KB_MEM_LIMIT}
  
  grafana:
    depends_on:
      - postgres-1
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    user: '0'
    ports:
      - '3000:3000'
    volumes:
      - '/data:/var/lib/grafana'
    networks:
      - backend-network
  
  backend-main:
    container_name: parcorpus-backend
    build: './Parcorpus/'
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DbConnectionString=${DB_CONNECTION_STRING}
      - WordAlignerConfiguration__WordAlignerServer=${WORD_ALIGNER}
      - ELASTIC_URL=${ELASTIC_URL}
      - QueueConfiguration__ConnectionString=${RABBITMQ_CONNECTION_STRING}
    volumes:
      - './Parcorpus/src/Parcorpus.API/Parcorpus.API/appsettings.json:/app/appsettings.json'
      - './Parcorpus/src/Parcorpus.API/Parcorpus.API/NLog.config:/app/NLog.config'
      - './Parcorpus/src/Parcorpus.API/logs:/app/log'
    depends_on:
      - postgres-1
      - es01 
      - grafana
      - kibana
      - aligner
      - rabbitmq
    networks:
      - backend-network
    ports:
      - 446:443
      - 802:80

  backend-mirror:
    container_name: parcorpus-mirror
    build: './Parcorpus/'
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DbConnectionString=${MIRROR_DB_CONNECTION_STRING}
      - WordAlignerConfiguration__WordAlignerServer=${WORD_ALIGNER}
      - ELASTIC_URL=${ELASTIC_URL}
      - QueueConfiguration__ConnectionString=${RABBITMQ_CONNECTION_STRING}
    volumes:
      - './Parcorpus/src/Parcorpus.API/Parcorpus.API/appsettings.json:/app/appsettings.json'
      - './Parcorpus/src/Parcorpus.API/Parcorpus.API/NLog.config:/app/NLog.config'
      - './Parcorpus/src/Parcorpus.API/logs:/app/log'
    depends_on:
      - postgres-1
      - postgres-2
      - es01 
      - grafana
      - kibana
      - aligner
      - rabbitmq
    networks:
      - backend-network
    ports:
      - 450:443
      - 850:80

  backend-read-only-1:
    build: './Parcorpus/'
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DbConnectionString=${DB_CONNECTION_STRING_READ_ONLY}
      - WordAlignerConfiguration__WordAlignerServer=${WORD_ALIGNER}
      - ELASTIC_URL=${ELASTIC_URL}
      - QueueConfiguration__ConnectionString=${RABBITMQ_CONNECTION_STRING}
    volumes:
      - './Parcorpus/src/Parcorpus.API/Parcorpus.API/appsettings.json:/app/appsettings.json'
      - './Parcorpus/src/Parcorpus.API/Parcorpus.API/NLog.config:/app/NLog.config'
      - './Parcorpus/src/Parcorpus.API/logs:/app/log'
    depends_on:
      - postgres-1
      - es01 
      - grafana
      - kibana
      - aligner
      - rabbitmq
      - backend-main
      - backend-mirror
    networks:
      - backend-network
    ports:
      - 447:443
      - 803:80
  
  backend-read-only-2:
    build: './Parcorpus/'
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DbConnectionString=${DB_CONNECTION_STRING_READ_ONLY}
      - WordAlignerConfiguration__WordAlignerServer=${WORD_ALIGNER}
      - ELASTIC_URL=${ELASTIC_URL}
      - QueueConfiguration__ConnectionString=${RABBITMQ_CONNECTION_STRING}
    volumes:
      - './Parcorpus/src/Parcorpus.API/Parcorpus.API/appsettings.json:/app/appsettings.json'
      - './Parcorpus/src/Parcorpus.API/Parcorpus.API/NLog.config:/app/NLog.config'
      - './Parcorpus/src/Parcorpus.API/logs:/app/log'
    depends_on:
      - postgres-1
      - es01 
      - grafana
      - kibana
      - aligner
      - rabbitmq
      - backend-main
      - backend-mirror
    networks:
      - backend-network
    ports:
      - 448:443
      - 804:80
  
  aligner:
    build: ./Parcorpus/src/Parcorpus.Services/Parcorpus.Services.AnnotationService/WordAlignerServer
    volumes:
        - ./Parcorpus/src/Parcorpus.Services/Parcorpus.Services.AnnotationService/WordAlignerServer:/usr/app/
    networks:
      - backend-network
    ports:
      - 50051:50051
  
  nginx:
    image: byjg/nginx-extras
    volumes:
      - ./logs:/var/log/nginx #log файлы.
      - ./nginx.conf:/etc/nginx/nginx.conf #Конфигурация nginx.
      - ./static:/static
      - ./docs:/docs
    working_dir: /parcorpus
    ports:
      - "80:80"
      - "443:443"
    restart:
      always
    networks:
      - backend-network
  
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
       - ./pgadmin:/var/lib/pgadmin
       - ./pgadmin_extra_servers.conf:/pgadmin_extra_servers.conf
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - backend-network
    restart: unless-stopped