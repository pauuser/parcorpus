worker_processes  5;  ## Default: 1
pid        /var/run/nginx.pid;
error_log  /var/log/nginx/error.log debug;

events {
  worker_connections  4096;  ## Default: 1024
}

http {
  charset utf-8;

  proxy_cache_path /parcorpus keys_zone=mycache:32m max_size=1g;

  more_set_headers 'Server: parcorpus';

  log_format main '$http_x_forwarded_for - $remote_user [$time_local] "$host" "$request" '
            '$status $body_bytes_sent "$http_referer" '
            '"$http_user_agent" $request_time';

  map $http_connection $connection_upgrade {
    "~*Upgrade" $http_connection;
    default keep-alive;
  }

  upstream get_pbackend {
    server backend-main:80 weight=2;
    server backend-read-only-1:80 weight=1;
    server backend-read-only-2:80 weight=1;
  }

  upstream pbackend {
    server backend-main:80;
  }

  upstream mirror_backend {
    server backend-mirror:80;
  }


  upstream database {
    server pgadmin;
  }

  map "$request_uri-$request_method" $upstream_location {
      ~*mirror* mirror_backend;
  		default pbackend;
  }


  sendfile on;
  tcp_nopush on;
  types_hash_max_size 2048;

  include /etc/nginx/mime.types;
  default_type application/octet-stream;


  proxy_set_header        Host $host;
  proxy_set_header        X-Real-IP $remote_addr;
  proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header        X-Forwarded-Proto $scheme;

  include servers/*;

  server { # serve static files 

    location ^~ /mirror {
      rewrite ^/mirror/(.*)$ /$1 break;

      proxy_pass http://$upstream_location;
      proxy_no_cache 1;
    }

    location / {
      root /static;
    }

    location /test {
      alias /static;
    }

    proxy_cache_methods GET;
    proxy_cache_min_uses 1; 

    location /documentation {
      default_type 'text/markdown; charset=utf-8';
      add_header Content-Type 'text/markdown; charset=utf-8';
      alias /docs/description-ru.md;
    }

    location /status {
      stub_status;
    }

    location = /api/v1 {
      return 301 http://localhost/api/v1/;
    }

    location = /api/v1/ {
      proxy_pass         http://pbackend/swagger/;
      proxy_http_version 1.1;
      proxy_redirect     off;
      proxy_set_header   Upgrade $http_upgrade;
      proxy_set_header   Connection $connection_upgrade;
      proxy_set_header   Host $host;
      proxy_cache_bypass $http_upgrade;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Proto $scheme;
    }

    location = /api/v1/v1/swagger.json {
      proxy_pass http://pbackend/swagger/v1/swagger.json;
    }

    location = /api/v1/swagger-ui-bundle.js {
      proxy_pass http://pbackend/swagger/swagger-ui-bundle.js;
    }

    location = /api/v1/swagger-ui-standalone-preset.js {
      proxy_pass http://pbackend/swagger/swagger-ui-standalone-preset.js;
    }

    location = /api/v1/swagger-ui.css {
      proxy_pass http://pbackend/swagger/swagger-ui.css;
    }

    location = /api/v1/index.html {
      proxy_pass http://pbackend/swagger/index.html;
    }

    location ~ /api/v1/ {
      if ($request_method != GET) {
        proxy_pass http://pbackend;
      }

      if ($request_method = GET) {
        proxy_pass http://get_pbackend;
      }
    }


    location /admin/ {
      proxy_set_header X-Script-Name /admin;
      proxy_set_header Host $host;
      proxy_pass http://database/;
      proxy_redirect off;
    }
  }
}